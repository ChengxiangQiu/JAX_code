
#################################
### Section - 8, Birth series ###
#################################

######################################
### Embedding birth series dataset ###
######################################

### The gene_count, df_cell, df_gene data could be downloaded from
### /net/shendure/vol10/www/content/members/cxqiu/public/backup/jax/download/mtx
### cell_annotation.run_28.csv.gz
### gene_count.run_28.mtx.gz
### gene_annotation.csv.gz

import scanpy as sc
import pandas as pd
import numpy as np
import os, sys

WORK_PATH = './'
example_i = "birth"

adata = sc.read_mtx(os.path.join(WORK_PATH, "gene_count.run_28.mtx.gz"))
pdata = pd.read_csv(os.path.join(WORK_PATH, "cell_annotation.run_28.csv.gz"), index_col = 0)
fdata = pd.read_csv(os.path.join(WORK_PATH, "gene_annotation.csv.gz"), index_col = 0)
adata.obs = pdata
adata.var = fdata

adata = adata[:, adata.var["gene_type"].isin(["protein_coding","pseudogene","lincRNA"])]
chr_include = ["chr" + str(i) for i in range(1,20)]
chr_include.append("chrM")
adata = adata[:, adata.var["chr"].isin(chr_include)]

adata.write(os.path.join(WORK_PATH, "adata_birth.h5ad"), compression="gzip")

sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
sc.pp.highly_variable_genes(adata, n_top_genes=2500)
adata = adata[:, adata.var.highly_variable]
sc.pp.scale(adata, max_value=10)
sc.tl.pca(adata, svd_solver='arpack', n_comps=30)
sc.pp.neighbors(adata, n_neighbors=30, n_pcs=30)

sc.tl.umap(adata, min_dist=0.3, n_components=3)
adata.obs['UMAP_1'] = list(adata.obsm['X_umap'][:,0])
adata.obs['UMAP_2'] = list(adata.obsm['X_umap'][:,1])
adata.obs['UMAP_3'] = list(adata.obsm['X_umap'][:,2])

sc.tl.leiden(adata, resolution=1, n_iterations=2)
adata.obs['leiden_res_1'] = adata.obs['leiden']

sc.tl.leiden(adata, resolution=2, n_iterations=2)
adata.obs['leiden_res_2'] = adata.obs['leiden']

sc.tl.umap(adata, min_dist=0.3, n_components=2)
print("Done UMAP ...")
print(str(format((time.time() - start_time)/3600, '.4f')) + 'hours')

adata.obs['UMAP_2d_1'] = list(adata.obsm['X_umap'][:,0])
adata.obs['UMAP_2d_2'] = list(adata.obsm['X_umap'][:,1])

adata.obs.to_csv(os.path.join(WORK_PATH, "adata_birth.obs.csv"))
adata.write(os.path.join(WORK_PATH, "adata_birth_processed.h5ad"), compression="gzip")

emb = adata.obsm['X_pca']
print(emb.shape)
np.savetxt(os.path.join(WORK_PATH, "adata_birth.PCs.csv"), emb, delimiter=",", fmt='%1.3f')



##############################################################################################
### perform subclustering on three major trajectories, by only including C-section samples ###
##############################################################################################


import scanpy as sc
import pandas as pd
import numpy as np
import os, sys

WORK_PATH = './'

adata_all = sc.read_h5ad(os.path.join(WORK_PATH, "adata_birth.h5ad"))

### pd_birth.csv is generated by write.csv("pd_birth.rds") in R

pdata = pd.read_csv(os.path.join(WORK_PATH, "pd_birth.csv"), index_col = 0)
adata_all.obs = pdata

### 
targ_list = ["Adipocytes","Hepatocytes","Lung_and_airway"]
day_include = ["Csection_0m","Csection_20m","Csection_40m","Csection_60m","Csection_80m"]

for i in targ_list:

    adata = adata_all[adata_all.obs["major_trajectory"] == i]
    adata = adata[adata.obs["day"].isin(day_include)]
    print("processing: " + i)
    print(adata.shape)

    sc.pp.normalize_total(adata, target_sum=1e4)
    sc.pp.log1p(adata)
    sc.pp.highly_variable_genes(adata, n_top_genes=2500)
    adata = adata[:, adata.var.highly_variable]
    sc.pp.scale(adata, max_value=10)
    sc.tl.pca(adata, svd_solver='arpack', n_comps=30)
    sc.pp.neighbors(adata, n_neighbors=30, n_pcs=30)

    sc.tl.umap(adata, min_dist=0.3, n_components=3)
    adata.obs['UMAP_1'] = list(adata.obsm['X_umap'][:,0])
    adata.obs['UMAP_2'] = list(adata.obsm['X_umap'][:,1])
    adata.obs['UMAP_3'] = list(adata.obsm['X_umap'][:,2])

    sc.tl.umap(adata, min_dist=0.3, n_components=2)
    adata.obs['UMAP_2d_1'] = list(adata.obsm['X_umap'][:,0])
    adata.obs['UMAP_2d_2'] = list(adata.obsm['X_umap'][:,1])
    
    sc.tl.leiden(adata, resolution=1, n_iterations=2)
    adata.obs['subcluster_leiden_res_1'] = adata.obs['leiden']

    sc.tl.leiden(adata, resolution=2, n_iterations=2)
    adata.obs['subcluster_leiden_res_2'] = adata.obs['leiden']

    sc.tl.leiden(adata, resolution=5, n_iterations=2)
    adata.obs['subcluster_leiden_res_5'] = adata.obs['leiden']

    adata.obs.to_csv(os.path.join(WORK_PATH, "adata_%s.obs.csv"%i))
    adata.write(os.path.join(WORK_PATH, "adata_%s_processed.h5ad"%i), compression="gzip")





#####################################################################################################################
### perform subclustering on three major trajectories, by including C-section samples + 3 natural birthed samples ###
#####################################################################################################################


import scanpy as sc
import pandas as pd
import numpy as np
import os, sys

WORK_PATH = './'

adata_all = sc.read_h5ad(os.path.join(WORK_PATH, "adata_birth.h5ad"))

### pd_birth.csv is generated by write.csv("pd_birth.rds") in R

pdata = pd.read_csv(os.path.join(WORK_PATH, "pd_birth.csv"), index_col = 0)
adata_all.obs = pdata

### 
targ_list = ["Adipocytes","Hepatocytes","Lung_and_airway"]
day_include = ["NatBirth","Csection_0m","Csection_20m","Csection_40m","Csection_60m","Csection_80m"]

for i in targ_list:

    adata = adata_all[adata_all.obs["major_trajectory"] == i]
    adata = adata[adata.obs["day"].isin(day_include)]
    print("processing: " + i)
    print(adata.shape)

    sc.pp.normalize_total(adata, target_sum=1e4)
    sc.pp.log1p(adata)
    sc.pp.highly_variable_genes(adata, n_top_genes=2500)
    adata = adata[:, adata.var.highly_variable]
    sc.pp.scale(adata, max_value=10)
    sc.tl.pca(adata, svd_solver='arpack', n_comps=30)
    sc.pp.neighbors(adata, n_neighbors=30, n_pcs=30)

    sc.tl.umap(adata, min_dist=0.3, n_components=3)
    adata.obs['UMAP_1'] = list(adata.obsm['X_umap'][:,0])
    adata.obs['UMAP_2'] = list(adata.obsm['X_umap'][:,1])
    adata.obs['UMAP_3'] = list(adata.obsm['X_umap'][:,2])

    sc.tl.umap(adata, min_dist=0.3, n_components=2)
    adata.obs['UMAP_2d_1'] = list(adata.obsm['X_umap'][:,0])
    adata.obs['UMAP_2d_2'] = list(adata.obsm['X_umap'][:,1])
    
    sc.tl.leiden(adata, resolution=1, n_iterations=2)
    adata.obs['subcluster_leiden_res_1'] = adata.obs['leiden']

    sc.tl.leiden(adata, resolution=2, n_iterations=2)
    adata.obs['subcluster_leiden_res_2'] = adata.obs['leiden']

    sc.tl.leiden(adata, resolution=5, n_iterations=2)
    adata.obs['subcluster_leiden_res_5'] = adata.obs['leiden']

    adata.obs.to_csv(os.path.join(WORK_PATH, "adata_%s_NatBirth.obs.csv"%i))
    adata.write(os.path.join(WORK_PATH, "adata_%s_NatBirth_processed.h5ad"%i), compression="gzip")

    emb = adata.obsm['X_pca']
    np.savetxt(os.path.join(WORK_PATH, "adata_%s_NatBirth.PCs.csv"%i), emb, delimiter=",", fmt='%1.3f')





